{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","MyPosts","React","memo","postsElements","posts","reverse","map","p","id","postsBlok","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updeteStatus","onChange","e","target","value","ProfileDataFormReduxForm","profile","error","style","formSummaryError","createField","Input","type","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlok","photos","large","userPhoto","mainPhoto","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevprops","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.fc798f3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlok\":\"ProfileInfo_descriptionBlok__2TJpz\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3TxyB\",\"contact\":\"ProfileInfo_contact__2WSJw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlok\":\"MyPosts_postsBlok__195rF\",\"posts\":\"MyPosts_posts__1wvzZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2mC6a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1KjC9\"};","\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post =(props) =>{\r\n    return ( \r\n        <div className={s.item}>\r\n          <img src=\"https://cdn.pixabay.com/photo/2016/09/22/16/38/avatar-1687700_960_720.jpg\"/> \r\n            {props.message}\r\n           <div>\r\n             <span>like</span> {props.likesCount}\r\n           </div>   \r\n        </div>\r\n    )  \r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport  {maxLengthCreator, required}  from  \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormControls\";\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n      let postsElements = [...props.posts]\r\n      .reverse()\r\n      .map((p) => <Post key={p.id} message={p.message} likesCount={p.likesCount} />)\r\n    \r\n      let newPostElement = React.createRef();\r\n\r\n      let onAddPost =(values) => {\r\n         props.addPost(values.newPostText);\r\n      }\r\n   \r\n   return (\r\n      <div className={s.postsBlok} >\r\n         <h3>My post</h3>\r\n        { <AddNewPostFormRedux onSubmit={onAddPost} /> }\r\n         <div className={s.posts}>\r\n            {postsElements}\r\n         </div>\r\n      </div>\r\n   )\r\n   \r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n   return (\r\n      <form onSubmit={props.handleSubmit}>\r\n         <div>\r\n         <Field component={Textarea} name=\"newPostText\" placeholder=\"Post message\" \r\n            validate={[ required, maxLength10 ]} />\r\n         </div>\r\n         <div>\r\n            <button >Add Post</button>  \r\n         </div>\r\n    </form>\r\n   )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addPostActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\n/* const MyPostsContainer =(props) =>{\r\n  return (\r\n    <StoreContext.Consumer> \r\n      {(store) => {\r\n        let state = store.getState();\r\n        let addPost =() => {\r\n        store.dispatch(addPostActionCreator());\r\n        }\r\n        let onPostChange = (text) => {\r\n        // let action ={type: \"APDATE-NEW-POST-TEXT\", newText: text};\r\n        let action =updeteNewPostTextActionCreator(text);\r\n        store.dispatch(action);\r\n        }\r\n  return <MyPosts addPost={addPost}\r\n            updateNewPostText={onPostChange} \r\n            posts={state.profilePage.posts} \r\n            newPostText={state.profilePage.newPostText}/>\r\n        }\r\n      }\r\n    </StoreContext.Consumer>\r\n  )\r\n}  */\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    }\r\n}\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, { useEffect, useState } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileStatusWithHooks = (props) =>{\r\n    \r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updeteStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.target.value);\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status:</b> <span onDoubleClick={activateEditMode} >{props.status || \"-----\"}</span>    \r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                   <input  autoFocus={true} onBlur={deactivateEditMode} \r\n                    onChange={onStatusChange} value={status} />   \r\n                </div>\r\n            }\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { createField, Input, Textarea } from \"../../common/FormsControls/FormControls\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\"\r\n\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n  return <form onSubmit={handleSubmit} >\r\n    <div><button>save</button></div>\r\n    {error && <div className={style.formSummaryError}>\r\n              {error}\r\n          </div>\r\n          }\r\n    <div>\r\n      <b>Full name</b>: {createField(\"Full name\", \"fullName\", Input, [])}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: { createField(\"\", \"lookingForAJob\", Input, [], {type: \"checkbox\"}) }\r\n    </div>\r\n    <div>\r\n      <b>My profeshional skills</b>: \r\n      { createField(\"My profeshional skills\", \"lookingForAJobDescription\", Textarea, [] ) }\r\n    </div>\r\n    <div>\r\n      <b>About me</b>: \r\n      { createField(\"About me\", \"aboutMe\", Textarea, [] ) }\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: { Object.keys(profile.contacts).map(key => {\r\n        return <div key={key} className={s.contact}>\r\n            <b>{key}: {createField(key, \"contacts.\" + key, Input, [])}</b> \r\n        </div>\r\n      }) }\r\n    </div>          \r\n  </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: \"edit-profile\"})(ProfileDataForm);\r\n\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { useState } from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/users1.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\"\r\n\r\n\r\nconst ProfileInfo =({profile, status, updeteStatus, isOwner, savePhoto, saveProfile}) =>{\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if(!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if(e.target.files.length){\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    })         \r\n}\r\n\r\n  return ( \r\n    <div>  \r\n      <div className={s.descriptionBlok}>\r\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n        <div>\r\n          {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} /> }\r\n        </div> <br></br>\r\n\r\n          {editMode \r\n              ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} /> \r\n              : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={()=>{setEditMode(true)}} /> }        \r\n          \r\n          <ProfileStatusWithHooks status={status} updeteStatus={updeteStatus} />\r\n      </div>\r\n    </div>\r\n ) \r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n  return <div>\r\n    {isOwner &&<div><button onClick={goToEditMode} >edit</button></div>}\r\n    <div>\r\n      <b>Full name</b>: {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n    <div>\r\n      <b>My profeshional skills</b>: {profile.lookingForAJobDescription}\r\n    </div>\r\n    }\r\n    <div>\r\n      <b>About me</b>: {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: { Object.keys(profile.contacts).map(key => {\r\n        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n      }) }\r\n    </div>          \r\n  </div>\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n  return <div className={s.contact}>\r\n    <b>{contactTitle}</b>: {contactValue}\r\n  </div>\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile =(props) =>{\r\n    return ( \r\n      <div>\r\n        <ProfileInfo  profile={props.profile} \r\n                      status={props.status} \r\n                      updeteStatus={props.updeteStatus}\r\n                      isOwner={props.isOwner} \r\n                      savePhoto={props.savePhoto}\r\n                      saveProfile={props.saveProfile} />\r\n        <MyPostsContainer />                 \r\n      </div>\r\n    )  \r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {  withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { getUserProfile, getStatus, updeteStatus, savePhoto, saveProfile } from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n  refreshProfile () {\r\n    let userId = this.props.match.params.userId\r\n    if(!userId){\r\n      userId = this.props.authorizedUserId;\r\n      if(!userId){\r\n        this.props.history.push(\"/login\")\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()   \r\n  }\r\n\r\n  componentDidUpdate(prevprops, prevState, snapshot) {\r\n    if(this.props.match.params.userId != prevprops.match.params.userId) {\r\n    this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render(){    \r\n    return ( \r\n      <div>\r\n        <Profile {...this.props} \r\n        profile={this.props.profile} \r\n        status={this.props.status} \r\n        updeteStatus={this.props.updeteStatus} \r\n        isOwner={!this.props.match.params.userId} \r\n        savePhoto={this.props.savePhoto}\r\n        //saveProfile={this.props.saveProfile}\r\n        />                         \r\n      </div>\r\n    )  \r\n  }    \r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,  \r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {getUserProfile, getStatus, updeteStatus, savePhoto, saveProfile}), \r\n  //withAuthRedirect,\r\n  withRouter)\r\n  (ProfileContainer);\r\n\r\n"],"sourceRoot":""}